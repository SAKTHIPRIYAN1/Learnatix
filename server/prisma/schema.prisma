// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  clerkId   String   @id @unique
  name      String   @db.VarChar(100)
  email     String   @unique
  role      Role     @default(STUDENT)  // this is a base role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// all classRoom thaat user is participant!!
  classrooms ClassRoomParticipant[]

// all chat the User has..
  chatMessages Chat[]

// all the task created by the user!!!
  tasks Task[]

// all the Submission of the User!!
  submissions TaskSubmission[]


  @@index([clerkId,email])
}

model ClassRoom {
  roomId     String @id  @default(uuid())
  className  String
  filePath   String?
  description String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

// all the pariticipants of that room!!
  participants ClassRoomParticipant[] 
//  relation for the invite Token!!
  inviteToken InviteToken[]
// relation to the Chat Messages
  chatMessages Chat[]

  notes Notes[]

  tasks Task[]

}

/// Explicit join table for m-n with roles
model ClassRoomParticipant {
  id        Int       @id @default(autoincrement())
  userId    String
  roomId    String
  role      Role   

  user      Users     @relation(fields: [userId], references: [clerkId],onDelete: Cascade)
  room      ClassRoom @relation(fields: [roomId], references: [roomId],onDelete: Cascade)

  @@unique([userId, roomId])
}

model InviteToken{
  token String @id
  classId String
  createdAt DateTime @default(now())
  isSharing Boolean  @default(true)

// relation
  classRoom ClassRoom @relation(fields: [classId],references: [roomId],onDelete: Cascade)
}

model Chat{
  chatId String @id @default(uuid())
  message String
  classId String
  createdAt DateTime @default(now())
  senderId String

  // relation for the classRoom Model
  classRoom ClassRoom @relation(fields: [classId],references: [roomId],onDelete: Cascade)
  // relation to  the User Model
  sender Users @relation(fields: [senderId],references: [clerkId],onDelete: Cascade)

  @@index([classId])
}


model Notes {
  notesId   String   @id @default(uuid())
  createdAt DateTime @default(now())
  notesPath String   @unique
  name String
  description String
  classId   String
  classRoom ClassRoom @relation(fields: [classId], references: [roomId],onDelete: Cascade)

  @@index([classId])
}


model Task {
  taskId String @id @default(uuid())
  name String
  description String
  dueDate DateTime
  filePath String
  
  createdAt DateTime @default(now())
  
  // teacher task relation using user
  teacherId String
  Teacher Users @relation(fields: [teacherId],references: [clerkId],onDelete: Cascade)

// class Task Relation
  classId   String
  classRoom ClassRoom @relation(fields: [classId], references: [roomId],onDelete: Cascade)

// submission task Relation
  submission TaskSubmission[]
  @@index([taskId])
}


model TaskSubmission{
  submissionId String @id @default(uuid())
  createdAt DateTime @default(now())
  remark String @default("")
  review String @default("")
  score Int?  // score can be null if not reviewed yet
  filePath String

// task Relation with the submission!!!
  taskId String
  task Task @relation(fields: [taskId],references: [taskId],onDelete: Cascade)

  studentId String
  student Users @relation(fields: [studentId],references: [clerkId],onDelete: Cascade)
  @@index([taskId])
  @@index([studentId])
}




enum Role{
  TEACHER
  STUDENT
}

enum TaskType{
  QUIZ
  ASSIGNMENT
}


